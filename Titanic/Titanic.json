{"paragraphs":[{"text":"%python\nprint(\"%html <p align='center'><img src='https://raw.githubusercontent.com/imatheussm/ds-notebooks/master/igor-matheus.png'></img></p>\")","user":"anonymous","dateUpdated":"2019-04-19T19:43:06-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p align='center'><img src='https://raw.githubusercontent.com/imatheussm/ds-notebooks/master/igor-matheus.png'></img></p>\n"}]},"apps":[],"jobName":"paragraph_1555713786877_1850880981","id":"20190419-183353_1372059587","dateCreated":"2019-04-19T19:43:06-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:910"},{"text":"%md\n# Titanic Dataset\n**A classic dataset. A marking event.**\n<p align='justify'>The sinking of the RMS Titanic is one of the most infamous shipwrecks in history.  On April 15, 1912, during her maiden voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew. This sensational tragedy shocked the international community and led to better safety regulations for ships.</p>\n\n<p align='justify'>One of the reasons that the shipwreck led to such loss of life was that there were not enough lifeboats for the passengers and crew. Although there was some element of luck involved in surviving the sinking, some groups of people were more likely to survive than others, such as women, children, and the upper-class.</p>\n\n<p align='justify'>This dataset is a very famous one, and can be used as training and test data to a model, aiming to predict whether a passenger survived based on its features. <a href=\"https://www.kaggle.com/c/titanic/overview/description\">Get this dataset on Kaggle!</a></p>","user":"anonymous","dateUpdated":"2019-04-19T19:43:06-0300","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":7,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Titanic Dataset</h1>\n<p><strong>A classic dataset. A marking event.</strong><br/><p align='justify'>The sinking of the RMS Titanic is one of the most infamous shipwrecks in history. On April 15, 1912, during her maiden voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew. This sensational tragedy shocked the international community and led to better safety regulations for ships.</p></p>\n<p align='justify'>One of the reasons that the shipwreck led to such loss of life was that there were not enough lifeboats for the passengers and crew. Although there was some element of luck involved in surviving the sinking, some groups of people were more likely to survive than others, such as women, children, and the upper-class.</p>\n<p align='justify'>This dataset is a very famous one, and can be used as training and test data to a model, aiming to predict whether a passenger survived based on its features. <a href=\"https://www.kaggle.com/c/titanic/overview/description\">Get this dataset on Kaggle!</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555713786879_1662859374","id":"20190419-182401_99232058","dateCreated":"2019-04-19T19:43:06-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:911"},{"text":"%md\n# Notebook Strategy Overview\n**A brief overview on what will be done throughout this notebook.**\n<p align=\"justify\">In order to take full advantage of Apache Zeppelin's data analysis capabilities, after the initial steps with the data (preprocessing, basic visualization, etc.), the machine learning park will be done both with <strong>Sci-Kit Learn</strong> and <strong>Apache Spark (through Python and it's API, pyspark)</strong>.</p>\n\n<p align=\"justify\">The goal throughout these implementations is not only to review previously learned concepts from all the modules, but to do so adding into the mix Zeppelin's integrated visualization capabilities.</p>\n\n<p align=\"justify\">Let's get to it :)</p>","user":"anonymous","dateUpdated":"2019-04-19T19:43:06-0300","config":{"lineNumbers":false,"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":5,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{"0":{"graph":{"mode":"table","height":503.6,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Notebook Strategy Overview</h1>\n<p><strong>A brief overview on what will be done throughout this notebook.</strong><br/><p align=\"justify\">In order to take full advantage of Apache Zeppelin&rsquo;s data analysis capabilities, after the initial steps with the data (preprocessing, basic visualization, etc.), the machine learning park will be done both with <strong>Sci-Kit Learn</strong> and <strong>Apache Spark (through Python and it&rsquo;s API, pyspark)</strong>.</p></p>\n<p align=\"justify\">The goal throughout these implementations is not only to review previously learned concepts from all the modules, but to do so adding into the mix Zeppelin's integrated visualization capabilities.</p>\n<p align=\"justify\">Let's get to it :)</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555713786880_-660313260","id":"20190419-184809_866487691","dateCreated":"2019-04-19T19:43:06-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:912"},{"text":"%md\n## Data Overview","user":"anonymous","dateUpdated":"2019-04-19T19:43:06-0300","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Data Overview</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1555713786881_123236651","id":"20190419-192001_47451006","dateCreated":"2019-04-19T19:43:06-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:913"},{"text":"import numpy             as np\nimport pandas            as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn           as sns","user":"anonymous","dateUpdated":"2019-04-19T19:49:14-0300","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"colWidth":4,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1555713786882_-2087527034","id":"20190419-172717_1531941270","dateCreated":"2019-04-19T19:43:06-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:914","dateFinished":"2019-04-19T19:49:18-0300","dateStarted":"2019-04-19T19:49:14-0300"},{"text":"import os\nos.chdir(\"/home/igor/Downloads/\")\n\n\ntrain, test = pd.read_csv('train.csv',index_col=\"PassengerId\"), pd.read_csv('test.csv',index_col=\"PassengerId\")","user":"anonymous","dateUpdated":"2019-04-19T19:52:17-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"colWidth":8,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1555713786882_-1122898536","id":"20190419-185757_350674698","dateCreated":"2019-04-19T19:43:06-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:915","dateFinished":"2019-04-19T19:52:17-0300","dateStarted":"2019-04-19T19:52:17-0300"},{"text":"z.show(train.describe())","user":"anonymous","dateUpdated":"2019-04-19T19:52:22-0300","config":{"lineNumbers":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"colWidth":6,"editorMode":"ace/mode/python","fontSize":9,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"Survived":"string","Pclass":"string","Age":"string","SibSp":"string","Parch":"string","Fare":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"Survived\tPclass\tAge\tSibSp\tParch\tFare\n891.0\t891.0\t714.0\t891.0\t891.0\t891.0\n0.3838383838383838\t2.308641975308642\t29.69911764705882\t0.5230078563411896\t0.38159371492704824\t32.204207968574636\n0.4865924542648575\t0.836071240977049\t14.526497332334042\t1.1027434322934317\t0.8060572211299483\t49.6934285971809\n0.0\t1.0\t0.42\t0.0\t0.0\t0.0\n0.0\t2.0\t20.125\t0.0\t0.0\t7.9104\n0.0\t3.0\t28.0\t0.0\t0.0\t14.4542\n1.0\t3.0\t38.0\t1.0\t0.0\t31.0\n1.0\t3.0\t80.0\t8.0\t6.0\t512.3292\n"}]},"apps":[],"jobName":"paragraph_1555713786883_-2124286581","id":"20190419-185939_1903083451","dateCreated":"2019-04-19T19:43:06-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:916","dateFinished":"2019-04-19T19:52:22-0300","dateStarted":"2019-04-19T19:52:22-0300"},{"text":"z.show(test.describe())","user":"anonymous","dateUpdated":"2019-04-19T19:52:24-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"colWidth":6,"editorMode":"ace/mode/python","fontSize":9,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"Pclass":"string","Age":"string","SibSp":"string","Parch":"string","Fare":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"Pclass\tAge\tSibSp\tParch\tFare\n418.0\t332.0\t418.0\t418.0\t417.0\n2.2655502392344498\t30.272590361445783\t0.4473684210526316\t0.3923444976076555\t35.627188489208635\n0.8418375519640503\t14.181209235624422\t0.8967595611217135\t0.9814288785371691\t55.907576179973844\n1.0\t0.17\t0.0\t0.0\t0.0\n1.0\t21.0\t0.0\t0.0\t7.8958\n3.0\t27.0\t0.0\t0.0\t14.4542\n3.0\t39.0\t1.0\t0.0\t31.5\n3.0\t76.0\t8.0\t9.0\t512.3292\n"}]},"apps":[],"jobName":"paragraph_1555713786884_893876421","id":"20190419-185943_312681628","dateCreated":"2019-04-19T19:43:06-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:917","dateFinished":"2019-04-19T19:52:24-0300","dateStarted":"2019-04-19T19:52:24-0300"},{"text":"z.show(train.head())","user":"anonymous","dateUpdated":"2019-04-19T19:52:32-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"colWidth":6,"editorMode":"ace/mode/python","fontSize":9,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{"columns":[{"name":"Pclass","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Name","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Survived","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Sex","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Age","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"SibSp","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Parch","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Ticket","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Fare","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Cabin","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Embarked","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""}],"scrollFocus":{},"selection":[],"grouping":{"grouping":[],"aggregations":[],"rowExpandedStates":{}},"treeView":{},"pagination":{"paginationCurrentPage":1,"paginationPageSize":250}},"tableColumnTypeState":{"names":{"Survived":"string","Pclass":"string","Name":"string","Sex":"string","Age":"string","SibSp":"string","Parch":"string","Ticket":"string","Fare":"string","Cabin":"string","Embarked":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"Survived\tPclass\tName\tSex\tAge\tSibSp\tParch\tTicket\tFare\tCabin\tEmbarked\n0\t3\tBraund, Mr. Owen Harris\tmale\t22.0\t1\t0\tA/5 21171\t7.25\tnan\tS\n1\t1\tCumings, Mrs. John Bradley (Florence Briggs Thayer)\tfemale\t38.0\t1\t0\tPC 17599\t71.2833\tC85\tC\n1\t3\tHeikkinen, Miss. Laina\tfemale\t26.0\t0\t0\tSTON/O2. 3101282\t7.925\tnan\tS\n1\t1\tFutrelle, Mrs. Jacques Heath (Lily May Peel)\tfemale\t35.0\t1\t0\t113803\t53.1\tC123\tS\n0\t3\tAllen, Mr. William Henry\tmale\t35.0\t0\t0\t373450\t8.05\tnan\tS\n"}]},"apps":[],"jobName":"paragraph_1555713786884_-525636040","id":"20190419-190452_707368368","dateCreated":"2019-04-19T19:43:06-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:918","dateFinished":"2019-04-19T19:52:32-0300","dateStarted":"2019-04-19T19:52:32-0300"},{"text":"z.show(test.head())","user":"anonymous","dateUpdated":"2019-04-19T19:52:35-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"colWidth":6,"editorMode":"ace/mode/python","fontSize":9,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"Pclass":"string","Name":"string","Sex":"string","Age":"string","SibSp":"string","Parch":"string","Ticket":"string","Fare":"string","Cabin":"string","Embarked":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"Pclass\tName\tSex\tAge\tSibSp\tParch\tTicket\tFare\tCabin\tEmbarked\n3\tKelly, Mr. James\tmale\t34.5\t0\t0\t330911\t7.8292\tnan\tQ\n3\tWilkes, Mrs. James (Ellen Needs)\tfemale\t47.0\t1\t0\t363272\t7.0\tnan\tS\n2\tMyles, Mr. Thomas Francis\tmale\t62.0\t0\t0\t240276\t9.6875\tnan\tQ\n3\tWirz, Mr. Albert\tmale\t27.0\t0\t0\t315154\t8.6625\tnan\tS\n3\tHirvonen, Mrs. Alexander (Helga E Lindqvist)\tfemale\t22.0\t1\t1\t3101298\t12.2875\tnan\tS\n"}]},"apps":[],"jobName":"paragraph_1555713786885_1812824637","id":"20190419-190708_2105247112","dateCreated":"2019-04-19T19:43:06-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:919","dateFinished":"2019-04-19T19:52:35-0300","dateStarted":"2019-04-19T19:52:35-0300"},{"text":"%md\nIt is noticeable that the train dataframe has a Survived column, which the test dataframe doesn't. Since this is a competition on Kaggle, it is understandable.","user":"anonymous","dateUpdated":"2019-04-19T19:43:06-0300","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>It is noticeable that the train dataframe has a Survived column, which the test dataframe doesn&rsquo;t. Since this is a competition on Kaggle, it is understandable.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555713786886_409216263","id":"20190419-191204_1042842425","dateCreated":"2019-04-19T19:43:06-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:920"},{"text":"%md\n## Exploratory data analysis\n<p align='justify'>This data analysis will be made with the union of train and test datasets.</p>","user":"anonymous","dateUpdated":"2019-04-19T19:43:06-0300","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Exploratory data analysis</h2>\n<p align='justify'>This data analysis will be made with the union of train and test datasets.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555713786887_-764258155","id":"20190419-190731_853832944","dateCreated":"2019-04-19T19:43:06-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:921"},{"text":"dataset = pd.concat([train,test],sort=True)","user":"anonymous","dateUpdated":"2019-04-19T19:54:12-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1555713786887_1773346645","id":"20190419-192307_1387318345","dateCreated":"2019-04-19T19:43:06-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:922","dateFinished":"2019-04-19T19:54:12-0300","dateStarted":"2019-04-19T19:54:12-0300"},{"text":"z.show(dataset.tail())","user":"anonymous","dateUpdated":"2019-04-19T19:54:34-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"Age":"string","Cabin":"string","Embarked":"string","Fare":"string","Name":"string","Parch":"string","Pclass":"string","Sex":"string","SibSp":"string","Survived":"string","Ticket":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"Age\tCabin\tEmbarked\tFare\tName\tParch\tPclass\tSex\tSibSp\tSurvived\tTicket\nnan\tnan\tS\t8.05\tSpector, Mr. Woolf\t0\t3\tmale\t0\tnan\tA.5. 3236\n39.0\tC105\tC\t108.9\tOliva y Ocana, Dona. Fermina\t0\t1\tfemale\t0\tnan\tPC 17758\n38.5\tnan\tS\t7.25\tSaether, Mr. Simon Sivertsen\t0\t3\tmale\t0\tnan\tSOTON/O.Q. 3101262\nnan\tnan\tS\t8.05\tWare, Mr. Frederick\t0\t3\tmale\t0\tnan\t359309\nnan\tnan\tC\t22.3583\tPeter, Master. Michael J\t1\t3\tmale\t1\tnan\t2668\n"}]},"apps":[],"jobName":"paragraph_1555713786888_-2116552972","id":"20190419-192330_1259646989","dateCreated":"2019-04-19T19:43:06-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:923","dateFinished":"2019-04-19T19:54:34-0300","dateStarted":"2019-04-19T19:54:34-0300"},{"text":"%md\n<p align='justify'>From the get-go, by looking at the columns Age, Cabin and Survived, we can see the presence of NaN values. Their presence under the Survived column is understandable for the aforementioned reasons, and the Cabin column can hardly be of any use, the Age column might be a significant feature in seeing which age categories got the highest number of survivors, for instance. The following steps will be taken:</p>\n<ol>\n    <li align='justify'>The visualization of the amount of missing data will be plotted with seaborn; and</li>\n    <li align='justify'>Values will be imputed or amputed according to its use (or lack thereof) and severeness of missing data.</li>\n</ol>\n\n<p align='justify'>But before be proceed with that, we need to cast some columns of interest (namely, Sex and Embarked) into numbers, so that the models can use them. We'll seize the opportunity and drop not only the original columns, but string columns without correlation with the Survived column and the Survived column itself! But it's just so we can create a Linear Progression Model, evaluate it, and input the missing Age values. But first things first!</p>","user":"anonymous","dateUpdated":"2019-04-19T20:52:57-0300","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p align='justify'>From the get-go, by looking at the columns Age, Cabin and Survived, we can see the presence of NaN values. Their presence under the Survived column is understandable for the aforementioned reasons, and the Cabin column can hardly be of any use, the Age column might be a significant feature in seeing which age categories got the highest number of survivors, for instance. The following steps will be taken:</p>\n<ol>\n    <li align='justify'>The visualization of the amount of missing data will be plotted with seaborn; and</li>\n    <li align='justify'>Values will be imputed or amputed according to its use (or lack thereof) and severeness of missing data.</li>\n</ol>\n<p align='justify'>But before be proceed with that, we need to cast some columns of interest (namely, Sex and Embarked) into numbers, so that the models can use them. We'll seize the opportunity and drop not only the original columns, but string columns without correlation with the Survived column and the Survived column itself! But it's just so we can create a Linear Progression Model, evaluate it, and input the missing Age values. But first things first!</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555713786888_515357766","id":"20190419-192342_192692098","dateCreated":"2019-04-19T19:43:06-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:924","dateFinished":"2019-04-19T20:52:57-0300","dateStarted":"2019-04-19T20:52:57-0300"},{"text":"#solvable through an one-liner!\ntreated_dataset = pd.get_dummies(dataset,columns=[\"Embarked\",\"Sex\"],drop_first=True).drop([\"Cabin\",\"Name\",\"Ticket\",\"Survived\"],axis=1)\nz.show(treated_dataset.tail(10))","user":"anonymous","dateUpdated":"2019-04-20T00:31:21-0300","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":252,"optionOpen":false,"setting":{"table":{"tableGridState":{"columns":[{"name":"Age","visible":true,"width":150,"sort":{},"filters":[{}],"pinned":""},{"name":"Fare","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Parch","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Pclass","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"SibSp","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Embarked_Q","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Embarked_S","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Sex_male","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""}],"scrollFocus":{},"selection":[],"grouping":{"grouping":[],"aggregations":[],"rowExpandedStates":{}},"treeView":{},"pagination":{"paginationCurrentPage":1,"paginationPageSize":250}},"tableColumnTypeState":{"names":{"Age":"string","Fare":"string","Parch":"string","Pclass":"string","SibSp":"string","Embarked_Q":"string","Embarked_S":"string","Sex_male":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python","tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555717728840_-2067006175","id":"20190419-204848_1058978759","dateCreated":"2019-04-19T20:48:48-0300","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:13847","dateFinished":"2019-04-20T00:31:21-0300","dateStarted":"2019-04-20T00:31:21-0300","results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"Age\tFare\tParch\tPclass\tSibSp\tEmbarked_Q\tEmbarked_S\tSex_male\nnan\t7.7208\t0.0\t3.0\t0.0\t1.0\t0.0\t0.0\n3.0\t13.775\t1.0\t3.0\t1.0\t0.0\t1.0\t0.0\nnan\t7.75\t0.0\t3.0\t0.0\t1.0\t0.0\t0.0\n37.0\t90.0\t0.0\t1.0\t1.0\t1.0\t0.0\t0.0\n28.0\t7.775\t0.0\t3.0\t0.0\t0.0\t1.0\t0.0\nnan\t8.05\t0.0\t3.0\t0.0\t0.0\t1.0\t1.0\n39.0\t108.9\t0.0\t1.0\t0.0\t0.0\t0.0\t0.0\n38.5\t7.25\t0.0\t3.0\t0.0\t0.0\t1.0\t1.0\nnan\t8.05\t0.0\t3.0\t0.0\t0.0\t1.0\t1.0\nnan\t22.3583\t1.0\t3.0\t1.0\t0.0\t0.0\t1.0\n"}]}},{"user":"anonymous","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{"1":{"graph":{"mode":"table","height":364.033,"optionOpen":false}}},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555718134276_-122889441","id":"20190419-205534_1394626362","dateCreated":"2019-04-19T20:55:34-0300","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:16299","text":"fig = plt.figure(figsize=(12,5))\nz.show(sns.heatmap(treated_dataset.isnull(),yticklabels=False,cbar=False,cmap='viridis'))","dateUpdated":"2019-04-19T21:09:50-0300","dateFinished":"2019-04-19T21:09:51-0300","dateStarted":"2019-04-19T21:09:50-0300","results":{"code":"SUCCESS","msg":[{"type":"IMG","data":"\n\n"},{"type":"TEXT","data":"<Figure size 864x360 with 1 Axes>"}]}},{"user":"anonymous","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":102,"optionOpen":false}}},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555718502757_-12471854","id":"20190419-210142_1342380398","dateCreated":"2019-04-19T21:01:42-0300","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19496","dateUpdated":"2019-04-20T00:42:48-0300","dateFinished":"2019-04-20T00:42:48-0300","dateStarted":"2019-04-20T00:42:48-0300","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Analysis Results</h3>\n<p align='justify'> As it can be seen on the block next to this one, a fifth of the ages is unknown. We'll attempt to tackle this problem through a Linear Regression model, both through sklearn and pyspark.</p>\n</div>"}]},"text":"%md\n### Analysis Results\n<p align='justify'> As it can be seen on the block next to this one, a fifth of the ages is unknown. We'll attempt to tackle this problem through a Linear Regression model, both through sklearn and pyspark.</p>"},{"user":"anonymous","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555718346387_1278986675","id":"20190419-205906_207528247","dateCreated":"2019-04-19T20:59:06-0300","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:16953","text":"\n\nprint(\"%html <strong>The percentage of NaN values in the Age column is {:.2f}%.</strong>\".format(treated_dataset[\"Age\"].isna().sum()/len(treated_dataset)*100))","dateUpdated":"2019-04-19T21:10:23-0300","dateFinished":"2019-04-19T21:06:00-0300","dateStarted":"2019-04-19T21:06:00-0300","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<strong>The percentage of NaN values in the Age column is 20.09%.</strong>\n"}]}},{"text":"lr_dataset = treated_dataset.dropna(how='any')\n","user":"anonymous","dateUpdated":"2019-04-20T11:48:20-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"colWidth":6,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1555713786889_1848105349","id":"20190419-192649_547347734","dateCreated":"2019-04-19T19:43:06-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:925","dateFinished":"2019-04-19T21:12:31-0300","dateStarted":"2019-04-19T21:12:31-0300"},{"user":"anonymous","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555720226884_-1609030225","id":"20190419-213026_1321796413","dateCreated":"2019-04-19T21:30:26-0300","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:30609","text":"treated_dataset.to_csv(\"treated_dataset.csv\")\nlr_dataset.to_csv(\"lr_dataset.csv\")","dateUpdated":"2019-04-19T21:31:46-0300","dateFinished":"2019-04-19T21:31:46-0300","dateStarted":"2019-04-19T21:31:46-0300","results":{"code":"SUCCESS","msg":[]}},{"user":"anonymous","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555719498906_18131756","id":"20190419-211818_2027431028","dateCreated":"2019-04-19T21:18:18-0300","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21582","text":"%spark.pyspark\n\n#PYSPARK\nimport os\nos.chdir(\"/home/igor/Downloads/\")\ntreated_dataset = spark.read.csv(\"/home/igor/Downloads/treated_dataset.csv\",header=True,inferSchema=True)\nlr_dataset = spark.read.csv(\"/home/igor/Downloads/lr_dataset.csv\",header=True,inferSchema=True)\n\nfrom pyspark.ml.regression import LinearRegression\nfrom pyspark.ml.linalg import Vectors\nfrom pyspark.ml.feature import VectorAssembler\n\n#assembler\nassembler = VectorAssembler(inputCols=[\"Fare\",\"Parch\",\"Pclass\",\"SibSp\",\"Embarked_Q\",\"Embarked_S\",\"Sex_male\"],outputCol=\"features\",handleInvalid=\"skip\")\noutput = assembler.transform(lr_dataset).select([\"features\",\"Age\"]).withColumnRenamed(\"Age\",\"label\")\n\n# THIS CODE IS TESTED ON PYSPARK 2.4.1. HOWEVER, THE PYSPARK VERSION USED BY ZEPPELIN IS 2.2.1.\n\n#model\nlr = LinearRegression().fit(output)\n\n#assembled data\ntreated_dataset_assembled = assembler.transform(treated_dataset)\n\n#data to evaluate\nmissing_ages = treated_dataset_assembled.filter(treated_dataset[\"Age\"].isNull() == True)\n\nfrom pyspark.sql.types import IntegerType, DoubleType\npredictions = lr.transform(missing_ages)\npredictions = predictions.withColumn(\"prediction\",predictions[\"prediction\"].cast(IntegerType()))\npredictions = predictions.withColumn(\"prediction\",predictions[\"prediction\"].cast(DoubleType()))\n\n#ages\nages = predictions.select([\"PassengerId\",\"prediction\"]).withColumnRenamed(\"PassengerId\",\"Id\")\ntreated_dataset = treated_dataset.join(ages,treated_dataset[\"PassengerId\"]==ages[\"Id\"],how=\"full\").withColumn(\"Age\",coalesce(treated_dataset[\"Age\"],ages[\"prediction\"])).drop(\"Id\",\"prediction\")\n\n\n\n\n","dateUpdated":"2019-04-20T11:48:15-0300","dateFinished":"2019-04-20T00:21:03-0300","dateStarted":"2019-04-20T00:21:02-0300","results":{"code":"SUCCESS","msg":[]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://10.0.2.15:4041/jobs/job?id=4","http://10.0.2.15:4041/jobs/job?id=5","http://10.0.2.15:4041/jobs/job?id=6","http://10.0.2.15:4041/jobs/job?id=7"],"interpreterSettingId":"spark"}}},{"user":"anonymous","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555719151002_-549288266","id":"20190419-211231_1383679908","dateCreated":"2019-04-19T21:12:31-0300","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21355","dateUpdated":"2019-04-20T00:31:25-0300","dateFinished":"2019-04-20T00:31:26-0300","dateStarted":"2019-04-20T00:31:25-0300","results":{"code":"SUCCESS","msg":[]},"text":"#PANDAS & SKLEARN\n\nfrom sklearn.linear_model import LinearRegression\n\n#train model\nlr = LinearRegression()\nlr.fit(lr_dataset.drop(\"Age\",axis=1),lr_dataset[\"Age\"])\n#predictions\npredictions = lr.predict(treated_dataset.loc[treated_dataset[\"Age\"].isna()].drop(\"Age\",axis=1))\npredictions = pd.DataFrame(predictions,index=treated_dataset.loc[treated_dataset[\"Age\"].isna()].index)\npredictions.columns = [\"Age\"]\ntreated_dataset.update(predictions)\ntreated_dataset[\"Age\"] = treated_dataset[\"Age\"].apply(lambda x: int(x))"},{"user":"anonymous","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"Age":"string","Fare":"string","Parch":"string","Pclass":"string","SibSp":"string","Embarked_Q":"string","Embarked_S":"string","Sex_male":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555719590748_-129902539","id":"20190419-211950_18620554","dateCreated":"2019-04-19T21:19:50-0300","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:26720","text":"z.show(treated_dataset.tail(10))","dateUpdated":"2019-04-20T00:31:44-0300","dateFinished":"2019-04-20T00:31:44-0300","dateStarted":"2019-04-20T00:31:44-0300","results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"Age\tFare\tParch\tPclass\tSibSp\tEmbarked_Q\tEmbarked_S\tSex_male\n27.0\t7.7208\t0.0\t3.0\t0.0\t1.0\t0.0\t0.0\n3.0\t13.775\t1.0\t3.0\t1.0\t0.0\t1.0\t0.0\n27.0\t7.75\t0.0\t3.0\t0.0\t1.0\t0.0\t0.0\n37.0\t90.0\t0.0\t1.0\t1.0\t1.0\t0.0\t0.0\n28.0\t7.775\t0.0\t3.0\t0.0\t0.0\t1.0\t0.0\n27.0\t8.05\t0.0\t3.0\t0.0\t0.0\t1.0\t1.0\n39.0\t108.9\t0.0\t1.0\t0.0\t0.0\t0.0\t0.0\n38.0\t7.25\t0.0\t3.0\t0.0\t0.0\t1.0\t1.0\n27.0\t8.05\t0.0\t3.0\t0.0\t0.0\t1.0\t1.0\n21.0\t22.3583\t1.0\t3.0\t1.0\t0.0\t0.0\t1.0\n"}]}},{"text":"fig = plt.figure(figsize=(12,5))\nz.show(sns.heatmap(treated_dataset.isnull(),yticklabels=False,cbar=False,cmap='viridis'))","user":"anonymous","dateUpdated":"2019-04-20T00:31:50-0300","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555730808230_-1235005753","id":"20190420-002648_1101036048","dateCreated":"2019-04-20T00:26:48-0300","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:38397","dateFinished":"2019-04-20T00:31:51-0300","dateStarted":"2019-04-20T00:31:50-0300","results":{"code":"SUCCESS","msg":[{"type":"IMG","data":"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\n\n"},{"type":"TEXT","data":"<Figure size 864x360 with 1 Axes>"}]}},{"user":"anonymous","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555719624998_1476997643","id":"20190419-212024_1215859296","dateCreated":"2019-04-19T21:20:24-0300","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:26811","text":"%md\n### Results\n<p align='justify'>As it can be seen above, the pyspark implementation works; however, the result could only be achieved on pyspark 2.4.1. Pyspark 2.2.1. lacks the expectancy of the handleInvalid parameter under the VectorAssembler class, resulting in an error. Copying and pasting the code in a regular Jupyter Notebook with pyspark installed solves this problem.</p>\n\n<p align='justify'>Attempts were made to replace pyspark.zip (located under $ZEPPELIN_PATH/interpreter/spark/pyspark/), however, it is a custom-made file when compared to the pyspark module distributed through PyPI. It's connection with Zeppelin itself is deep enough to cause problems when the .zip file is replaced.</p>","dateUpdated":"2019-04-20T00:26:45-0300","dateFinished":"2019-04-20T00:26:17-0300","dateStarted":"2019-04-20T00:26:17-0300","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Results</h3>\n<p align='justify'>As it can be seen above, the pyspark implementation works; however, the result could only be achieved on pyspark 2.4.1. Pyspark 2.2.1. lacks the expectancy of the handleInvalid parameter under the VectorAssembler class, resulting in an error. Copying and pasting the code in a regular Jupyter Notebook with pyspark installed solves this problem.</p>\n<p align='justify'>Attempts were made to replace pyspark.zip (located under $ZEPPELIN_PATH/interpreter/spark/pyspark/), however, it is a custom-made file when compared to the pyspark module distributed through PyPI. It's connection with Zeppelin itself is deep enough to cause problems when the .zip file is replaced.</p>\n</div>"}]}},{"user":"anonymous","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555730823973_271745865","id":"20190420-002703_1823928643","dateCreated":"2019-04-20T00:27:03-0300","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:38470","dateUpdated":"2019-04-20T00:32:45-0300","dateFinished":"2019-04-20T00:32:45-0300","dateStarted":"2019-04-20T00:32:45-0300","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<strong>The percentage of NaN values in the Age column is 0.00%.</strong>\n"}]},"text":"print(\"%html <strong>The percentage of NaN values in the Age column is {:.2f}%.</strong>\".format(treated_dataset[\"Age\"].isna().sum()/len(treated_dataset)*100))"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555731348636_-363399169","id":"20190420-003548_2068078664","dateCreated":"2019-04-20T00:35:48-0300","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:51554","text":"%md\n### More plots\n<p align=\"justify\">However, this time only the trainset will be taken into account, due to the presence of the Survived column. Its presencce is fundamental to make some interesting visualizations.</p>","dateUpdated":"2019-04-20T00:53:49-0300","dateFinished":"2019-04-20T00:53:49-0300","dateStarted":"2019-04-20T00:53:49-0300","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>More plots</h3>\n<p align=\"justify\">However, this time only the trainset will be taken into account, due to the presence of the Survived column. Its presencce is fundamental to make some interesting visualizations.</p>\n</div>"}]}},{"user":"anonymous","config":{"colWidth":3,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555731223424_-1650827206","id":"20190420-003343_156890768","dateCreated":"2019-04-20T00:33:43-0300","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:51463","text":"sns.set_style(\"whitegrid\")\n\n\ntrain.groupby([\"Survived\",\"Sex\"]).size().reset_index().pivot(columns=\"Sex\",index=\"Survived\",values=0).plot(kind=\"bar\",stacked=True,figsize=(5,4))","dateUpdated":"2019-04-20T11:44:57-0300","dateFinished":"2019-04-20T11:44:57-0300","dateStarted":"2019-04-20T11:44:57-0300","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"<matplotlib.axes._subplots.AxesSubplot at 0x7f493bb1e588>\n"},{"type":"IMG","data":"\n\n"},{"type":"TEXT","data":"<Figure size 360x288 with 1 Axes>"}]}},{"user":"anonymous","config":{"colWidth":3,"fontSize":9,"enabled":true,"results":{"1":{"graph":{"mode":"table","height":223.967,"optionOpen":false}}},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555731774845_-1472784269","id":"20190420-004254_1492988441","dateCreated":"2019-04-20T00:42:54-0300","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:52016","dateUpdated":"2019-04-20T11:45:21-0300","dateFinished":"2019-04-20T11:45:21-0300","dateStarted":"2019-04-20T11:45:21-0300","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"<matplotlib.axes._subplots.AxesSubplot at 0x7f493b937b38><Figure size 360x388.8 with 1 Axes>\n"},{"type":"IMG","data":"\n"}]},"text":"train.groupby([\"Survived\",\"Pclass\"]).size().reset_index().pivot(columns=\"Pclass\",index=\"Survived\",values=0).plot(kind=\"bar\",stacked=True,figsize=(5,5.4))"},{"user":"anonymous","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{"1":{"graph":{"mode":"table","height":281,"optionOpen":false}}},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555731799141_1665909000","id":"20190420-004319_1726974964","dateCreated":"2019-04-20T00:43:19-0300","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:52092","text":"fig = plt.figure(figsize=(12,5))\nsns.distplot(train.loc[train[\"Survived\"]==0][\"Age\"].dropna(),color=\"darkred\",bins=50,kde=False,label=\"Deceased\")\nsns.distplot(train.loc[train[\"Survived\"]==1][\"Age\"].dropna(),color=\"darkblue\",bins=50,kde=False,label=\"Survived\")\nfig.legend()","dateUpdated":"2019-04-20T11:45:08-0300","dateFinished":"2019-04-20T11:45:09-0300","dateStarted":"2019-04-20T11:45:08-0300","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"<matplotlib.legend.Legend at 0x7f493bc05e10><Figure size 864x360 with 1 Axes>\n"},{"type":"IMG","data":"\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555732062086_493213692","id":"20190420-004742_1532555997","dateCreated":"2019-04-20T00:47:42-0300","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:52357","text":"%md\n# Logistic Regression\n<p align='justify'>And we have arrived, finally! This part, as with the previous part, will be made through both pandas & sklearn and through the pyspark toolset (at least that's the idea). Since the code for the pyspark implementation does not run on the pyspark version currently shipped with Apache Zeppelin, both methods will start from the treated dataset with the imputed ages seen above.</p>\n<p align='justify'>We'll begin by reinserting the survived column, and then exporting the treated_data dataset to a .csv file and then import it under the pyspark interpreter scope.</p>","dateUpdated":"2019-04-20T11:55:58-0300","dateFinished":"2019-04-20T11:55:58-0300","dateStarted":"2019-04-20T11:55:58-0300","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Logistic Regression</h1>\n<p align='justify'>And we have arrived, finally! This part, as with the previous part, will be made through both pandas & sklearn and through the pyspark toolset (at least that's the idea). Since the code for the pyspark implementation does not run on the pyspark version currently shipped with Apache Zeppelin, both methods will start from the treated dataset with the imputed ages seen above.</p>\n<p align='justify'>We'll begin by reinserting the survived column, and then exporting the treated_data dataset to a .csv file and then import it under the pyspark interpreter scope.</p>\n</div>"}]}},{"text":"treated_dataset_final = treated_dataset.copy()\ntreated_dataset_final[\"Survived\"] = train[\"Survived\"].copy()","user":"anonymous","dateUpdated":"2019-04-20T11:58:03-0300","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555772161895_-1243913811","id":"20190420-115601_1409130633","dateCreated":"2019-04-20T11:56:01-0300","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:53989","dateFinished":"2019-04-20T11:57:15-0300","dateStarted":"2019-04-20T11:57:14-0300","results":{"code":"SUCCESS","msg":[]}},{"text":"\ntreated_dataset_final.to_csv(\"treated_dataset_final.csv\")","user":"anonymous","dateUpdated":"2019-04-20T11:58:10-0300","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555771415301_-1503095570","id":"20190420-114335_203034856","dateCreated":"2019-04-20T11:43:35-0300","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:53050","dateFinished":"2019-04-20T11:57:56-0300","dateStarted":"2019-04-20T11:57:56-0300","results":{"code":"SUCCESS","msg":[]}},{"user":"anonymous","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555771875752_-718047109","id":"20190420-115115_1970998131","dateCreated":"2019-04-20T11:51:15-0300","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:53645","dateUpdated":"2019-04-20T12:25:31-0300","dateFinished":"2019-04-20T12:24:44-0300","dateStarted":"2019-04-20T12:24:44-0300","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Area under the curve (AUC): 0.6970963197773073\n"}]},"text":"# PANDAS & SKLEARN\nfrom sklearn.linear_model import LogisticRegression\n\nX_train, X_test, y_train, y_test = train_test_split(treated_dataset_final.iloc[:891].drop(\"Survived\",axis=1), treated_dataset_final.iloc[:891][\"Survived\"], test_size=0.3)\n\nlogr = LogisticRegression(solver=\"lbfgs\",max_iter=200)\nlogr.fit(X_train,y_train)\ny_predicted = logr.predict(X_test)\n\nfrom sklearn.metrics import classification_report,average_precision_score\nAUC = average_precision_score(y_test,y_predicted)\n#print(classification_report(y_test,y_predicted))\nprint(\"Area under the curve (AUC): {}\".format(AUC))\n\n\n\n\n\n\n\n\n"},{"user":"anonymous","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555772044917_-77133825","id":"20190420-115404_203818346","dateCreated":"2019-04-20T11:54:04-0300","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:53763","dateUpdated":"2019-04-20T12:25:24-0300","dateFinished":"2019-04-20T12:19:06-0300","dateStarted":"2019-04-20T12:19:04-0300","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Area under the curve (AUC): 0.7629467972159961\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://10.0.2.15:4041/jobs/job?id=84","http://10.0.2.15:4041/jobs/job?id=85","http://10.0.2.15:4041/jobs/job?id=86","http://10.0.2.15:4041/jobs/job?id=87","http://10.0.2.15:4041/jobs/job?id=88","http://10.0.2.15:4041/jobs/job?id=89","http://10.0.2.15:4041/jobs/job?id=90","http://10.0.2.15:4041/jobs/job?id=91","http://10.0.2.15:4041/jobs/job?id=92","http://10.0.2.15:4041/jobs/job?id=93","http://10.0.2.15:4041/jobs/job?id=94","http://10.0.2.15:4041/jobs/job?id=95","http://10.0.2.15:4041/jobs/job?id=96","http://10.0.2.15:4041/jobs/job?id=97","http://10.0.2.15:4041/jobs/job?id=98","http://10.0.2.15:4041/jobs/job?id=99","http://10.0.2.15:4041/jobs/job?id=100","http://10.0.2.15:4041/jobs/job?id=101","http://10.0.2.15:4041/jobs/job?id=102","http://10.0.2.15:4041/jobs/job?id=103","http://10.0.2.15:4041/jobs/job?id=104","http://10.0.2.15:4041/jobs/job?id=105","http://10.0.2.15:4041/jobs/job?id=106","http://10.0.2.15:4041/jobs/job?id=107","http://10.0.2.15:4041/jobs/job?id=108","http://10.0.2.15:4041/jobs/job?id=109","http://10.0.2.15:4041/jobs/job?id=110","http://10.0.2.15:4041/jobs/job?id=111","http://10.0.2.15:4041/jobs/job?id=112","http://10.0.2.15:4041/jobs/job?id=113","http://10.0.2.15:4041/jobs/job?id=114","http://10.0.2.15:4041/jobs/job?id=115","http://10.0.2.15:4041/jobs/job?id=116","http://10.0.2.15:4041/jobs/job?id=117","http://10.0.2.15:4041/jobs/job?id=118","http://10.0.2.15:4041/jobs/job?id=119","http://10.0.2.15:4041/jobs/job?id=120","http://10.0.2.15:4041/jobs/job?id=121"],"interpreterSettingId":"spark"}},"text":"%spark.pyspark\n# PYSPARK & MLLIB\ntreated_dataset_final = spark.read.csv(\"/home/igor/Downloads/treated_dataset_final.csv\",header=True,inferSchema=True)\nassembler = VectorAssembler(inputCols=[\"Age\",\"Fare\",\"Parch\",\"Pclass\",\"SibSp\",\"Embarked_Q\",\"Embarked_S\",\"Sex_male\"],outputCol=\"features\")\n\nfrom pyspark.ml.classification import LogisticRegression\nfrom pyspark.ml import Pipeline\n\nlogr = LogisticRegression(featuresCol=\"features\",labelCol=\"Survived\")\npipeline = Pipeline(stages=[assembler,logr])\n\ntrain_titanic_data, test_titanic_data = treated_dataset_final.filter(treated_dataset_final[\"PassengerId\"]<892).randomSplit([.7,.3])\n\nfit_model = pipeline.fit(train_titanic_data)\nresults = fit_model.transform(test_titanic_data)\n\nfrom pyspark.ml.evaluation import BinaryClassificationEvaluator\nmy_eval = BinaryClassificationEvaluator(rawPredictionCol=\"prediction\",labelCol=\"Survived\")\nAUC = my_eval.evaluate(results)\nprint(\"Area under the curve (AUC): {}\".format(AUC))"},{"text":"%md\n## Results\n<p align='justify'>Both models seem to do a reazonably decent job in predicting if the passenger survived or not. As it can be concluded from the code above, all the learning and testing tasks were made only with the training part of the dataset, since it contains the Survived column. However, now we want to feed the whole dataset to the algorithms and get the results. This time, however, we won't be able to evaluate them!</p>","user":"anonymous","dateUpdated":"2019-04-20T12:28:04-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false,"completionKey":"TAB"},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555773931769_753505954","id":"20190420-122531_1258634035","dateCreated":"2019-04-20T12:25:31-0300","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:55369","dateFinished":"2019-04-20T12:28:04-0300","dateStarted":"2019-04-20T12:28:04-0300","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Results</h2>\n<p align='justify'>Both models seem to do a reazonably decent job in predicting if the passenger survived or not. As it can be concluded from the code above, all the learning and testing tasks were made only with the training part of the dataset, since it contains the Survived column. However, now we want to feed the whole dataset to the algorithms and get the results. This time, however, we won't be able to evaluate them!</p>\n</div>"}]}},{"text":"# PANDAS & SKLEARN\nfrom sklearn.linear_model import LogisticRegression\n\n#X_train, X_test, y_train, y_test = train_test_split(treated_dataset_final.iloc[:891].drop(\"Survived\",axis=1), treated_dataset_final.iloc[:891][\"Survived\"], test_size=0.3)\n\nX_train, y_train = treated_dataset_final.iloc[:891].drop(\"Survived\",axis=1), treated_dataset_final.iloc[:891][\"Survived\"]\nX_test = treated_dataset_final.iloc[891:].drop(\"Survived\",axis=1)#.dropna(how=\"any\")\nX_test.loc[X_test[\"Fare\"].isna() == True, \"Fare\"] = 0\n\nlogr = LogisticRegression(solver=\"lbfgs\",max_iter=200)\nlogr.fit(X_train,y_train)\ny_predicted = logr.predict(X_test)\n\nfinal = treated_dataset_final.copy()\nfinal.iloc[891:,8:9] = y_predicted\nz.show(final.tail(10))","user":"anonymous","dateUpdated":"2019-04-20T12:43:08-0300","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"Age":"string","Fare":"string","Parch":"string","Pclass":"string","SibSp":"string","Embarked_Q":"string","Embarked_S":"string","Sex_male":"string","Survived":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555773040069_-1461817121","id":"20190420-121040_2131421563","dateCreated":"2019-04-20T12:10:40-0300","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:54923","dateFinished":"2019-04-20T12:43:08-0300","dateStarted":"2019-04-20T12:43:08-0300","results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"Age\tFare\tParch\tPclass\tSibSp\tEmbarked_Q\tEmbarked_S\tSex_male\tSurvived\n27.0\t7.7208\t0.0\t3.0\t0.0\t1.0\t0.0\t0.0\t1.0\n3.0\t13.775\t1.0\t3.0\t1.0\t0.0\t1.0\t0.0\t1.0\n27.0\t7.75\t0.0\t3.0\t0.0\t1.0\t0.0\t0.0\t1.0\n37.0\t90.0\t0.0\t1.0\t1.0\t1.0\t0.0\t0.0\t1.0\n28.0\t7.775\t0.0\t3.0\t0.0\t0.0\t1.0\t0.0\t1.0\n27.0\t8.05\t0.0\t3.0\t0.0\t0.0\t1.0\t1.0\t0.0\n39.0\t108.9\t0.0\t1.0\t0.0\t0.0\t0.0\t0.0\t1.0\n38.0\t7.25\t0.0\t3.0\t0.0\t0.0\t1.0\t1.0\t0.0\n27.0\t8.05\t0.0\t3.0\t0.0\t0.0\t1.0\t1.0\t0.0\n21.0\t22.3583\t1.0\t3.0\t1.0\t0.0\t0.0\t1.0\t0.0\n"}]}},{"user":"anonymous","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555774996847_-2105889984","id":"20190420-124316_409521464","dateCreated":"2019-04-20T12:43:16-0300","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:60578","dateUpdated":"2019-04-20T12:54:34-0300","dateFinished":"2019-04-20T12:54:36-0300","dateStarted":"2019-04-20T12:54:34-0300","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------+---+-------+-----+------+-----+----------+----------+--------+--------+\n|PassengerId|Age|   Fare|Parch|Pclass|SibSp|Embarked_Q|Embarked_S|Sex_male|Survived|\n+-----------+---+-------+-----+------+-----+----------+----------+--------+--------+\n|        892| 34| 7.8292|    0|     3|    0|         1|         0|       1|     0.0|\n|        893| 47|    7.0|    0|     3|    1|         0|         1|       0|     0.0|\n|        894| 62| 9.6875|    0|     2|    0|         1|         0|       1|     0.0|\n|        895| 27| 8.6625|    0|     3|    0|         0|         1|       1|     0.0|\n|        896| 22|12.2875|    1|     3|    1|         0|         1|       0|     1.0|\n|        897| 14|  9.225|    0|     3|    0|         0|         1|       1|     0.0|\n|        898| 30| 7.6292|    0|     3|    0|         1|         0|       0|     1.0|\n|        899| 26|   29.0|    1|     2|    1|         0|         1|       1|     0.0|\n|        900| 18| 7.2292|    0|     3|    0|         0|         0|       0|     1.0|\n|        901| 21|  24.15|    0|     3|    2|         0|         1|       1|     0.0|\n|        902| 27| 7.8958|    0|     3|    0|         0|         1|       1|     0.0|\n|        903| 46|   26.0|    0|     1|    0|         0|         1|       1|     0.0|\n|        904| 23|82.2667|    0|     1|    1|         0|         1|       0|     1.0|\n|        905| 63|   26.0|    0|     2|    1|         0|         1|       1|     0.0|\n|        906| 47| 61.175|    0|     1|    1|         0|         1|       0|     1.0|\n|        907| 24|27.7208|    0|     2|    1|         0|         0|       0|     1.0|\n|        908| 35|  12.35|    0|     2|    0|         1|         0|       1|     0.0|\n|        909| 21|  7.225|    0|     3|    0|         0|         0|       1|     0.0|\n|        910| 27|  7.925|    0|     3|    1|         0|         1|       0|     1.0|\n|        911| 45|  7.225|    0|     3|    0|         0|         0|       0|     1.0|\n+-----------+---+-------+-----+------+-----+----------+----------+--------+--------+\nonly showing top 20 rows\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://10.0.2.15:4041/jobs/job?id=569","http://10.0.2.15:4041/jobs/job?id=570","http://10.0.2.15:4041/jobs/job?id=571","http://10.0.2.15:4041/jobs/job?id=572","http://10.0.2.15:4041/jobs/job?id=573","http://10.0.2.15:4041/jobs/job?id=574","http://10.0.2.15:4041/jobs/job?id=575","http://10.0.2.15:4041/jobs/job?id=576","http://10.0.2.15:4041/jobs/job?id=577","http://10.0.2.15:4041/jobs/job?id=578","http://10.0.2.15:4041/jobs/job?id=579","http://10.0.2.15:4041/jobs/job?id=580","http://10.0.2.15:4041/jobs/job?id=581","http://10.0.2.15:4041/jobs/job?id=582","http://10.0.2.15:4041/jobs/job?id=583","http://10.0.2.15:4041/jobs/job?id=584","http://10.0.2.15:4041/jobs/job?id=585","http://10.0.2.15:4041/jobs/job?id=586","http://10.0.2.15:4041/jobs/job?id=587","http://10.0.2.15:4041/jobs/job?id=588","http://10.0.2.15:4041/jobs/job?id=589","http://10.0.2.15:4041/jobs/job?id=590","http://10.0.2.15:4041/jobs/job?id=591","http://10.0.2.15:4041/jobs/job?id=592","http://10.0.2.15:4041/jobs/job?id=593","http://10.0.2.15:4041/jobs/job?id=594","http://10.0.2.15:4041/jobs/job?id=595","http://10.0.2.15:4041/jobs/job?id=596","http://10.0.2.15:4041/jobs/job?id=597","http://10.0.2.15:4041/jobs/job?id=598","http://10.0.2.15:4041/jobs/job?id=599","http://10.0.2.15:4041/jobs/job?id=600"],"interpreterSettingId":"spark"}},"text":"%spark.pyspark\n# PYSPARK & MLLIB\nfrom pyspark.ml.classification import LogisticRegression\nfrom pyspark.ml import Pipeline\ntreated_dataset_final = spark.read.csv(\"/home/igor/Downloads/treated_dataset_final.csv\",header=True,inferSchema=True)\nassembler = VectorAssembler(inputCols=[\"Age\",\"Fare\",\"Parch\",\"Pclass\",\"SibSp\",\"Embarked_Q\",\"Embarked_S\",\"Sex_male\"],outputCol=\"features\")\n\nlogr = LogisticRegression(featuresCol=\"features\",labelCol=\"Survived\")\npipeline = Pipeline(stages=[assembler,logr])\n\ntrain_titanic_data, test_titanic_data = treated_dataset_final.filter(treated_dataset_final[\"PassengerId\"]<892), treated_dataset_final.filter(treated_dataset_final[\"PassengerId\"]>=892)\nfit_model = pipeline.fit(train_titanic_data)\nresults = fit_model.transform(test_titanic_data)\nresults = results.drop(\"features\",\"rawPrediction\",\"probability\",\"Survived\").withColumnRenamed(\"prediction\",\"Survived\").select([\"PassengerId\",\"Age\",\"Fare\",\"Parch\",\"Pclass\",\"SibSp\",\"Embarked_Q\",\"Embarked_S\",\"Sex_male\",\"Survived\"])\nz.show(results.show())"}],"name":"Titanic","id":"2E9VPZZ7U","noteParams":{},"noteForms":{},"angularObjects":{"python:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}